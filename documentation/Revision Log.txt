-- Known Issues --
> The ArmKinematicsSimulator.vi has a habit of crashing randomly...
> Position holding doesn't disengage when the arm reaches its final setpoint location.
> SwerveStrafeAssist.vi only supports locking to vectors parallel to the field Y-axis.
> The wide-angle camera is currently bypassed.

-- Untested Features --
> Added a ManipWaitForPiece auto command.
> Added a ManipWaitForAlignment auto command.

-- Releases --

v2.3
> Modified pose-sync while auto-targeting in auto.
> Modified the game piece sensing behavior.
> Tuning the path following rotation PID.
> Tuning the gripper game piece sensing.
> Allowing increased joint accelerations when going to GROUND.
> Allowing different low score setpoints for TeleOp and Auto.
> Robot is no longer forced to low gear when the arm is out.
> Updating the baseline current measurements.
> Fixing a bug in the Zebra play that prevented it from vibrating initially and when driving.
> Fixed an issue with selecting the TeleOp starting state.
> ManipChangeState now allows for -1 to indicate dashboard state selection.
> Tuning the arm joint accelerations for the stiffer arm.
> Adding the ability to balance each swerve drive motor via the feed-forward controller.
> Adding a timer SubVI with a built-in comparison.
> Removing the climber subsystem.
> Adjusting the LED strip length for the new arm.
> Fixing the name of "ArmPositionCheck.vi".
> Adding a time-of-flight sensor to detect game pieces in the hybrid nodes.

v2.2
> Hybrid nodes that have been scored on are saved and displayed on the dashboard.
> Adjusted Y positions of each target.
> Increased max vision pose trust X limit.
> Tuning the auto-targeting strafe PID controller.
> The scoring speed cap is only enforced under human control.
> Auto plays can no specifiy when to go in and out of auto-targeting.
> Allowing the robot to stay in ground pickup when autonomous transitions to TeleOp.
> Adding a wait for TeleOp autonomous command.
> Pre-GROUND now changes based off of the game period instead of if the robot is autonomous.
> Arm accelerates faster when stowing
> The speed limiter now applies while the arm is stowing.
> Improving the reliability and changing the behavior of the corner pivot controls.
> Corner pivoting is now disabled if the robot's heading is locked.
> Overhauls the auto-targeting behavior.
> Enables auto-targeting on the SHELF locations.
> Cleans up the drive state controller.
> Fixes an issue where the human player signal would cover up the status chaser.
> Adding an endgame timer to the LED indicators.
> Removing placeholder code for the climber subsystem.
> Removing placeholder code for the intake subsystem.
> Tweaking the master state to Lime Light stream mode mapping.
> Tuning the auto-balancing proportional gain.
> Tuning the MID and HIGH CONE arm setpoints.
> Disabling auto-targeting when running a systems check.

v2.1
> Changing the pre-ground setpoint used during autonomous.
> Reducing the elbow and wrist acceleration to reduce arm jiggle.
> Ejecting the game piece while hoppering will allow it to be re-acquired.
> Biasing the low score direction so that game pieces ejected against the side wall always come out the back of the robot.
> Makes the intake button slightly sticky.
> Tuning the gripper acquisition threshold.
> Adjusting the LED offsets for the new strips.
> Tuning the setpoints for the final arm and gripper design.
> Linking the simulated arm joint velocities to the true gear ratios.
> Tuning the MID CONE hold point.
> Improving rotation when auto-stowing from score and adding reset on disabled.
> Tuning the auto-targeting offset.
> Added the ability to resync the odometry-only pose with the fused pose estimate during auto.
> Places the robot in auto-targeting when autonomous and continuously updates the closest target.
> Prevents auto-stowing, and voids the "stationary" requirement, while the robot is autonomous to allow for faster state changes.
> Added a ManipGroundPickup auto command.
> Converts the DriveSetRobotPosition command to a manipulator command.
> Fixing a critical bug in the ManipChangeScoringPosition command.
> Added a ManipGroundScore auto command.
> Fixing a critical bug in the ManipChangeState command.
> Prevents the robot from going to SHELF outside of specified distance range.
> Impliments an auto-stow from the SHELF.
> Overhauls ModeDrivebase to make it easier to edit.
> Automatically locks the robot heading as it exits the community after scoring.
> Disable vision pose updates when running in auto test mode.
> Improving robot safety when the inverse kinematics solution fails during scoring.
> Tuning the GROUND and HOPPER setpoints.
> Preventing the LEDs from turning off when the battery gets low.
> Allows the robot to accept vision pose updates from the far end of the field.
> The manipulator haptic feedback now indicates confirmed changes to the robot state or scoring positions.
> Modifying the human player signal so that it doesn't hide the game piece being request.
> Cleaning up the master state controller.
> Tuning the HOPPER arm setpoints.
> Tuning game piece detection.
> Tuning auto-targeting.
> Preventing pose windup in the X direction during auto-targeting.
> SHELF and SCORE are now only allowed when the robot is within 45 degrees of the correct angle.
> All robot paths are sent to the Dashboard for display.
> STOW state is always allowed and visible on the dashboard.

v2.0
> Tuning the path following PID controllers.
> Added abitility to set the autonomous scoring position from the dashboard.
> Always starts the robot with a game piece in auto.
> Always un-latch the detected game piece when entering HOPPER, SHELF, or GROUND.
> Driver A is now used for switching to robot oriented mode
> Straightening the robot with Driver A is now Driver Y
> Re-linking the arm simulator to the main robot code.
> Updating velocity plot scalings based on the measured maximum velocities.
> Tuning the deadband on the anti-drift contoller.
> Tuning the "arm has arrived" threshold for greater responsiveness.
> Applying a global fix to prevent spurious alarms while CAN devices are booting.
> Fixing a bug with the master alarm state controller and the gripper alarms.
> Vision pose is no longer valid if not within the community.
> Updating the calibrated wheel diameter.
> Adding a ManipChangePiece auto command.
> Game piece sensing.
> Hold A to lock the robot heading in STOW and GROUND.
> Reporting auto-targeting usage to Dashboard.
> Changing master state buttons.
> Gripper state controller.
> Gear ratios etc. for the drivebase.
> Removing the ability for the manipulator to select the LOW scoring position.
> Gripper intialization.
> Gear ratios etc. for the arm.
> Gripper LED color code.
> Updating the joint sequencing framework for the new arm design.
> Gripper output code.
> The robot forces itself to low gear if one of the drive motors fails.
> Lowering the control loop alarm threshold.
> Values wired to the default terminal of "NT Get Boolean Array.vi" are now honored.
> Updating to FRC Game Tools v2023.2.
> Increasing the allowed wrist angle range and confirming that code can handle more than 360 degrees of allowed rotation.
> Automated extension of the arm (auto-targeting) based on the robot pose is now implimented.
> The robot can now balance while pointing in either direction.
> Initial sensor fusion algorithm is working, more tuning of the AprilTag validity flags and the wheel diameter are need.
> Fixing twitchy rotation control in the heading lock drive mode.
> Changes the deadband behavior for the heading lock drive mode.
> Fixing a bug that made the heading lock rotation adjustment sensitive to the driver profile's rotation maximum.
> Fixing a bug that caused the manipulator joystick to vibrate on boot.
> Adding ability to calibrate the GRID Y coordinates for each side of the field.
> Dampening the azimuth PID response.
> Improved the LimeLight latency estimation.
> New auto-targeting driver controls.
> Configured the target coordinates.
> Tying the LimeLight PiP modes to the master state controller.
> Updating the haptic engine to working with the planned SMR control scheme.
> Connecting the arm the feed-forward controller to the manipulator buttons.
> Connecting LED colors to manipulator buttons.
> Connecting arm scoring positions to manipulator buttons.
> The CUBE/CONE decision is now selected by the manipulator.
> Fixing a critical bug in the drift lock controller.
> Faulted drive motors can now be detected, handled, and reported to the Dashboard.
> The azimuth motors are now unlocked when module calibration mode is armed.
> Improving how the arm the recovers from a motor brownout condition.
> Fixes a bug which would cause a false critical battery warning at boot.
> Removing the absolute arm encoders.
> Removing Gripper code.
> Re-linking the auto-targeting override to the MASTER CAUTION.
> Preparing the Intake subsystem for future work.
> Removing the Hopper subsystem.
> Removing the color sensor.
> All Tune-tab NT values can be read when the Variables tab.
> Sending the swerve output loop time to the Dashboard.
> Fixing an initialization bug in the swerve angle latching.
> Adding a visualization of the swerve module state downstream of the angle latching code.
> Tuning swerve drift control PID.
> Converting the speed cap deceleration limit into real units for clarity.
> Overhauling the acceleration limiter on the swerve drive.
> Tuning swrve azimuth PID.
> The smoothed robot ground velocity can now be plotted.
> Improving the velocity and pose estimates during shifting.
> Properly tuning the shift time threshold.
> Shifter failure alarm is now bypassed when in actuator testing mode.
> Updating the documentation for the Talon FX wrappers.
> Swerve drive motor RPM measurements are now consolidated in the pose code.
> Switching to using Talon FX wrappers for the swerve output code.
> Merging OutputSwerveDrive.vi and OutputSwerveAzimuth.vi into OutputSwerve.vi.
> Adding a Talon FX wrapper for dynamic enabling of voltage compensation.

v1.2
> Cleaned up the Hopper state controller
> Swapped all instances of StickyButton2 and StickyButton with an updated StickyButton

v1.0
> Final arm configurations and tuning parameters.
> Updating the robot profile name.
> Flipping the Hopper Wing Right and Gripper Gripping solenoids.
> Changes the hopper wing flapping override.
> Fixing edge cases for setting the scoring position.
> Game piece sensor is not tuned yet.
> Modifying the gripper state controller based on working with real hardware.
> The ejector solenoid will fire when releasing a CUBE from the gripper.
> The grabbed game piece is now correctly sent to the Dashboard.
> Enforcing the frame perimeter extension limit for the arm.
> Adding auto commands needed for the automated systems check.
> Applying the correct drivebase gear ratios and configurations.
> Tweaking the robot acceleration calculation VI.
> Tuning the drivebase parameters and setting the calibrated wheel diameter.
> The drive base heading control is not commented out.
> Fixing bugs in the auto command to wait for the arm.
> Fixing bugs in the auto command to release a gamepiece.
> Added manual wing flapping control and removed auto flapping.
> Connecting Dashboard overrides to the Master Caution state controller.
> Allowing right and left hopper wings to be controlled independently depending on the alliance color.
> Swapped the hopper sensor default.
> The PWM port used for the LEDs is now properly closed when the robot code finishes.
> Tested hopper state controller on hardware.
> Set LED debug positions.
> Adding the ability to control the wrist in four-bar mode.
> Added display of end effector position on the dashboard.
> Hopper wings now open in the shelf master state.
> Initial joint setpoints are configured on the prototype arm.
> Added current draw alarms for the arm motors.
> Added on-motor soft limits to the shoulder.
> Added detection of arm motor fault.
> The auto-targeting override is disconnected from the alarm state controller.
> Flipping the arm base transform by 180 degrees.
> Fixing various arm control bugs.
> Actually controlling the arm motors with the code in OutputArm.vi.
> Tuning the FF, PID, and MM parameters for the prototype arm.
> Adding angle transforms to handle the four-bar mechanical behavior of the arm.
> Changing the name of SRX wrappers to FX wrappers.
> Raises the automatic shifting RPM threshold.
> Changing CAN IDs for the arm motors.
> Adding a readout of the wheel velocity average.
> Fixing a bug in the solenoid output code.
> Adding an ejector solenoid for the gripper.
> Updating the drivebase parameters for the 2023 robot.
> Creating a robot profile for "2023 Beta."
> Fixing a broken run arrow in the arm simulator.
> Adding an auto command to drive over the CHARGING STATION.
> Adding an auto command to wait for the arm to stop moving.
> Adding an auto command to release a gamepiece.
> Adding an auto command block to change the scoring position.

v0.5
> Flips the default gripper position.
> Adding a handshake sequence to ensure the LimeLight has the correct setting after a connection loss.
> Adding a state controller for the hopper.
> Adding distance and heading to target calculations which will be used for auto-targeting.
> Adding beam break code to detect game pieces in the hopper.
> Creating a new wrapper for commanding the state of the switchable REV PDH port.
> Creating the initial output code for the hopper.
> Creating a new wrapper for commanding the state of a double-acting solenoid.
> Creating the initial output code for the gripper.
> Creating an interface for auto-stowing the arm based on triggers from other subsystem state controllers.
> Reading an actual absolute encoder, tested calibration behavior and fixed bugs.
> Added logic for auto-stow
> Lowering the state controller loop delay to 25 ms.
> Updated the autonomous state change command to work with the 2023 master state controller.
> Merged in auto-balancing autonomous command.
> Linking the game piece detection to the grip solenoid state.
> Cleaning up the gripper state controller.
> Modifying the haptics engine for CHARGED UP.
> Modifying the power management state controller for CHARGED UP.
> Cleaning up the drivebase state controller.
> When balancing, force the robot into low gear.
> Driver can toggle auto-targeting control of the drive base.
> Unless overridden by a force to low gear decision, force to high gear when robot is autonomous.
> Fixes a bug from 2021 that caused the LEDs to enter party mode unexpectadly. 
> Modifying the LED state controller for CHARGED UP.
> Adding a way to zero the pitch angle.
> Adding simulation capability for the robot pitch angle.
> Adding code to read and report the robot pitch angle.
> Adding joint angle constraints (in independent joint space).
> Connects the end effector jogging Dashboard data to the IK algorithm.
> The IK algorithm has been deployed and tested on the robot.

v0.4
> The robot now sends a "code is running" signal to the Dashboard.
> Adds a state controller for the arm.
> Finishes out the functionality for the on-computer arm kinematics simulator.
> Adds arm (and generic motor) simulation code.
> Adds visualization of the goal end effector position to the Dashboard.
> Integrates the arm state controller with the master state controller.
> Receives all arm data and overrides from the Dashboard.
> Arm zeroing and unlocking are now tied to Dashboard controls.
> Adds absolute arm encoder reading and calibration code.
> Sends the absolute arm encoder readings to the Dashboard.
> Adding absolute arm encoder sensors.
> Adds temperature readings and alarms for the arm motors.
> Sends the scoring state to the Dashboard.
> Manipulator buttons have been configured to control the robot master state.
> Sends the gripper state to the Dashboard.
> Merged MVP gripper state controller.
> The driver joystick will now vibrate when the robot is holding a game piece.
> Merged color sensor game piece detection.
> Increases the time threshold before a shifter failure is latched.
> More detailed alarm information is now sent to the Driver Station console when a motor overheats.
> Adds a GRNF for the REV Color Sensor v3.
> Foward Kinematics calculations are complete and integreated with the Feed Forward model for the Shoulder, Elbow, and Wrist motors.
> OutputArm infrastucture is in place to send all control and configuration commands to the Shoulder, Elbow, and Wrist motors.

v0.3
> Adding an Inverse and Forward Kinematics simulation for the arm.
> More detailed error messages are sent when a CAN or power fault occurs.
> Created a dedicated "Robot is Enabled" global variable
> Increasing the amount of disabled time before drive motors go into coast to keep from falling off of the CHARGING STATION.
> Cleaning up the Master State Controller.
> AprilTag pose estimates are now flipped based on alliance color.
> All triggered updates are now sent continuously for the first 5 seconds after their first call.
> Tweaked the set behavior of Auto_Path_Suffix for consistency.
> Fixing a bug in the auto play which is used if no auto plays can be loaded from the RoboRIO.
> Suggested autonomous start locations are sent to the Dashboard.
> Re-writes the auto play parser to support variables and setting the suggested robot start location.
> Automatic insertion of the dashboard delay into all auto plays.
> Robot pose estimation has been updated to work with 2023 AprilTags instead of 2022 retro-reflective targets.
> Cleans up the odometry code and fixes sever critical bugs from 2022.
> Switches to "hybrid" odometry which primarily uses the Falcon position data and only uses velocity projections durring shifting events.